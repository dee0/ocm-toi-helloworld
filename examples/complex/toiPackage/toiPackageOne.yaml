description: installPackageOne
executors: # The executor used will be the first with no actions or the first an action matching what was specified by the user on the CLI.  If no match then error
- actions:
  - actionOne
  - actionTwo
  resourceRef: # Doc says this is an array but it is really an optional field.  Issue [339](https://github.com/open-component-model/ocm-project/issues/339)
               # It can be an ociimage or a toiExecutor reource type.
    resource:
      name: toi-executor-one 
  # Should change simulation to use config below instead of stand alone file
  config:
    toiPackageExecutorConfig: 
      data: toiPackageExecutorConfigData 
      fromLibraryOne: (( stub(toiExecutorTemplateLibraryOne) ))
      fromLibraryTwo: (( stub(toiExecutorTemplateLibraryTwo) )) 
  # Should change simulation to use parameterMapping below instead of stand alone file
  parameterMapping:
    toiPackageExecutorParameterMapping:
      data: toiPackageExecutorParameterMapData
      fromToiPackageConfigTemplate: (( stub(toiPackageConfigTemplate) ))
      fromCredentials:
        name: (( stub(toiPackageConfigTemplate).fromLibraryOne.getCredentials("myExecutorOCI", "user") ))
        password: (( stub(toiPackageConfigTemplate).fromLibraryOne.getCredentials("myExecutorOCI", "password") ))
  credentialMapping:
    myPackageOCI: myExecutorOCI
  outputs: # It is an error to try and map a non-existent executor output.
    inputs/config: config
    inputs/ocmconfig: ocmconfig
    inputs/ocmrepo: ocmrepo
    inputs/parameters: parameters
    cmdline: cmdline
    environ: environ
- actions:
  - actionThree
  - actionFour
  resourceRef: # Doc says this is an array but it is really an optional field.  Issue [339](https://github.com/open-component-model/ocm-project/issues/339)
               # It can be an ociimage or a toiExecutor reource type.
    resource:
      name: toi-executor-two 
  # Should change simulation to use config below instead of stand alone file
  config:
    toiPackageExecutorConfig: 
      data: toiPackageExecutorConfigData 
      fromLibraryOne: (( stub(toiExecutorTemplateLibraryOne) ))
      fromLibraryTwo: (( stub(toiExecutorTemplateLibraryTwo) )) 
  # Should change simulation to use parameterMapping below instead of stand alone file
  parameterMapping:
    toiPackageExecutorParameterMapping:
      data: toiPackageExecutorParameterMapData
      fromToiPackageConfigTemplate: (( stub(toiPackageConfigTemplate) ))
      fromCredentials:
        name: (( stub(toiPackageConfigTemplate).fromLibraryOne.getCredentials("myExecutorOCI", "user") ))
        password: (( stub(toiPackageConfigTemplate).fromLibraryOne.getCredentials("myExecutorOCI", "password") ))
  credentialMapping:
    myPackageOCI: myExecutorOCI
  outputs: # It is an error to try and map a non-existent executor output.
    inputs/config: config
    inputs/ocmconfig: ocmconfig
    inputs/ocmrepo: ocmrepo
    inputs/parameters: parameters
    cmdline: cmdline
    environ: environ
configTemplate:
  toiPackageConfigTemplate:
    data: toiPackageConfigTemplateData 
    fromParamsFromCLI: (( stub(paramsFromCLI) ))
    fromLibraryOne: (( stub(toiPackageTemplateLibraryOne) ))
    fromLibraryTwo: (( stub(toiPackageTemplateLibraryTwo) )) 
configScheme: {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "properties": {
      "paramsFromCLI": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "pattern": "^[a-zA-Z]+$"
          },
          "fromLibraryOne": {
            "type": "object",
            "properties": {
              "data": {
                "type": "string",
                "pattern": "^[a-zA-Z]+$"
              },
              "fromLibraryTwo": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string",
                    "pattern": "^[a-zA-Z]+$"
                  }
                },
                "required": ["data"]
              },
              "getCredentials": {
                "type": "string",
                "pattern": "^\\(\\(\\s+&temporary\\(\\s+lambda\\s+.*\\)\\s+\\)\\)$"
              }
            },
            "required": ["data", "fromLibraryTwo", "getCredentials"]
          },
          "fromLibraryTwo": {
            "type": "object",
            "properties": {
              "data": {
                "type": "string",
                "pattern": "^[a-zA-Z]+$"
              }
            },
            "required": ["data"]
          }
        },
        "required": ["data", "fromLibraryOne", "fromLibraryTwo"]
      }
    },
    "required": ["paramsFromCLI"]
  }
templateLibraries:
- resource:
    name: toi-package-template-library-one
- resource:
    name: toi-package-template-library-two
credentials:
  myPackageOCI: 
    consumerId:
      type: OCIRegistry
    description: Description of myPackageOCI
    properties: 
      user: OCI repository user  
      password: OCI repository password  
    optional: false
additionalResources:
  configFile:
    resource:
      name: toi-package-additional-resource-config
  credentialsFile:
    resource:
      name: toi-package-additional-resource-credentials
  readme.txt: # OCM TOI doesn't seem to do anything with this
    resource:
      name: toi-package-additional-resource-readme
